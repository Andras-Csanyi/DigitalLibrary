@* Digital Library project *@
@* https://github.com/SayusiAndo/DigitalLibrary *@
@* Licensed under MIT License *@

@using DigitalLibrary.Ui.WebUi.Components.DiLibGrid.Providers
@typeparam TData
<table>
    <thead>
    @{
        if (DiLibGrid.Columns.Any())
        {
            if (DiLibGrid.AddButton)
            {
                <tr>
                    <td colspan="@(DiLibGrid.Columns.Count)">
                        <BSButton Color="Color.Primary"
                                  @onclick="@(async () => await ShowAddNewModal().ConfigureAwait(false))">
                            Add
                        </BSButton>
                    </td>
                </tr>
            }
            <tr>
                @{
                    foreach (string columnName in DiLibGrid.Columns)
                    {
                        <th>
                            @columnName
                        </th>
                    }
                }
            </tr>
        }
    }
    </thead>
    <tbody>
    @{
        if (Data == null)
        {
            <tr>Loading...</tr>
        }
        else
        {
            if (DiLibGrid.Columns.Any())
            {
                foreach (TData data in Data)
                {
                    <tr>
                        @{
                            foreach (string columnName in DiLibGrid.Columns)
                            {
                                if (columnName != RowCommandButtonConstants.DeleteRowCommandButton &&
                                    columnName != RowCommandButtonConstants.EditRowCommandButton)
                                {
                                    <td>
                                        @DiLibGrid.GetTableCellValue(columnName, data)
                                    </td>
                                }
                                if (columnName == RowCommandButtonConstants.DeleteRowCommandButton)
                                {
                                    <td>
                                        <BSButton
                                            @onclick="@(async () => await ShowConfirmDeleteModal(data).ConfigureAwait(false))">
                                            Delete
                                        </BSButton>
                                    </td>
                                }
                                if (columnName == RowCommandButtonConstants.EditRowCommandButton)
                                {
                                    <td>
                                        <BSButton
                                            @onclick="@(async () => await ShowEditModal(data).ConfigureAwait(false))">
                                            Edit
                                        </BSButton>
                                    </td>
                                }
                            }
                        }
                    </tr>
                }
            }
        }
    }
    </tbody>
    <tfoot>
    </tfoot>
</table>

<BSModal @ref="EditActionButton">
    @{
        if (DiLibGrid.GridMode == GridModesEnum.Update)
        {
            <CascadingValue Value="@DiLibGrid">
                <CascadingValue Value="@this">
                    <DiLibModalEdit @ref="@ModalEdit" TData="@DiLibGrid.ToBeEdited"/>
                </CascadingValue>
            </CascadingValue>
        }
    }
</BSModal>

<BSModal @ref="DeleteActionButton">
    <BSModalHeader>Are you sure...?</BSModalHeader>
    <BSModalBody>
        @{
            DiLibGrid.ShowDefaultInfoAboutGenericObject(DiLibGrid.ToBeDelete);
        }
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Secondary"
                  @onclick="@(async () => await DeleteActionHandler().ConfigureAwait(false))">
            Hide
        </BSButton>
        <BSButton Color="Color.Primary"
                  @onclick="@(async () => await DeleteActionHandler().ConfigureAwait(false))">
            Close
        </BSButton>
    </BSModalFooter>
</BSModal>

<BSModal @ref="AddNewActionButton">
    <BSModalHeader>Adding new...</BSModalHeader>
    <BSModalBody>
        <BSForm Model="@NewData">
            <DataAnnotationsValidator/>
            <BSFormGroup>
                <BSLabel>BS Label</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="@NewData" ValidateOnChange="true"></BSInput>
            </BSFormGroup>
        </BSForm>
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Secondary"
                  @onclick="@(async () => await SaveNewActionHandler().ConfigureAwait(false))">
            Save
        </BSButton>
        <BSButton Color="Color.Primary"
                  @onclick="@(async () => await CancelAddNewActionHandler().ConfigureAwait(false))">
            Cancel
        </BSButton>
    </BSModalFooter>
</BSModal>