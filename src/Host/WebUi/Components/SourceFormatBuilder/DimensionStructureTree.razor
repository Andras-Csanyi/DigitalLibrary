@using DigitalLibrary.MasterData.DomainModel
@{
    if (DimensionStructureParameter != null)
    {
        <ul style="list-style: none;">
            <li>
                <BSCard CardType="CardType.Card">
                    <BSCard CardType="CardType.Title">
                        <ul style="list-style: none;">
                            <li>
                                <strong>@DimensionStructureParameter.Name</strong>
                            </li>
                            <li>@DimensionStructureParameter.Desc</li>
                        </ul>
                    </BSCard>
                    <BSCard CardType="CardType.Subtitle">
                        <BSButton Size="Size.Small"
                                  Color="Color.Primary"
                                  @onclick="@(async () => await UpdateDocumentStructureInTheTreeAsync(DimensionStructureParameter.Id).ConfigureAwait(false))">
                            Update Node
                        </BSButton>
                        <BSButton Size="Size.Small"
                                  Color="Color.Danger"
                                  @onclick="@(async () => await DeleteDocumentStructureFromTreeAsync(DimensionStructureParameter.Id).ConfigureAwait(false))">
                            Remove Dimension Structure from Tree
                        </BSButton>
                        <BSButton Size="Size.Small"
                                  Color="Color.Primary"
                                  @onclick="@(async () => await AddDocumentStructureToTreeAsync(DimensionStructureParameter.Id, ParentDimensionStructureIdParameter).ConfigureAwait(false))">
                            Insert New Child Dimension Structure
                        </BSButton>
                    </BSCard>
                    <BSCard CardType="CardType.Text">
                        @{
                            if (DimensionStructureParameter.Dimension != null)
                            {
                                @DimensionStructureParameter.Dimension.Name
                            }
                            else
                            {
                                <div>No Dimension is attached.</div>
                            }
                        }
                    </BSCard>
                </BSCard>

            </li>
            @{
                if (DimensionStructureParameter.ChildDimensionStructures != null)
                {
                    if (DimensionStructureParameter.ChildDimensionStructures.Any())
                    {
                        foreach (DimensionStructure dimensionStructure in DimensionStructureParameter.ChildDimensionStructures)
                        {
                            <DimensionStructureTree DimensionStructureParameter="@dimensionStructure"
                                                    ParentDimensionStructureIdParameter="@ParentDimensionStructureIdParameter">
                            </DimensionStructureTree>
                        }
                    }
                }
            }
        </ul>
    }
    else
    {
        <div>DimensionStructureParameter is null</div>
    }
}

<BSModal @ref="_deleteDocumentStructureBsModalWindow">
    <BSModalHeader @onclick="@(async () => await DeleteDocumentStructureFromTreeAsync(DimensionStructureParameter.Id).ConfigureAwait(false))">
        <label>Are You Sure?</label>
    </BSModalHeader>
    <BSModalBody>
        <label>Dimension Structure Name:</label>
        @DimensionStructureParameter.Name
    </BSModalBody>
    <BSModalFooter>
        <BSButton Size="Size.Small"
                  Color="Color.Secondary"
                  @onclick="@(async () => await CancelDeleteDocumentStructureConfirmedAsync().ConfigureAwait(false))">
            Cancel
        </BSButton>
        <BSButton Size="Size.Small"
                  Color="Color.Danger"
                  @onclick="@(async () => await DeleteDocumentStructureConfirmedAsync().ConfigureAwait(false))">
            Delete
        </BSButton>
    </BSModalFooter>
</BSModal>

<BSModal @ref="_updateDocumentStructureInTheTreeModalWindow">
    <BSModalHeader @onclick="@(async () => await CancelDocumentStructureUpdateInTreeModalWindowAsync().ConfigureAwait(false))">
        Update Dimension Structure in Tree
    </BSModalHeader>
    <BSModalBody>
        <BSTable>
            <BSTableHead>
                <BSTableHeadCell>Id</BSTableHeadCell>
                <BSTableHeadCell>Name</BSTableHeadCell>
                <BSTableHeadCell>Desc</BSTableHeadCell>
                <BSTableHeadCell></BSTableHeadCell>
            </BSTableHead>
            <BSTableBody>
                @{
                    if (_dimensionStructures != null)
                    {
                        foreach (DimensionStructure dimensionStructure in _dimensionStructures)
                        {
                            if (_selectedForEditDimensionStructureId == dimensionStructure.Id)
                            {
                                <BSTableRow Color="Color.Primary">
                                    <BSTableCell>
                                        @dimensionStructure.Id
                                    </BSTableCell>
                                    <BSTableCell>
                                        @dimensionStructure.Name
                                    </BSTableCell>
                                    <BSTableCell>
                                        @dimensionStructure.Desc
                                    </BSTableCell>
                                    <BSTableCell>
                                    </BSTableCell>
                                    <BSTableCell>
                                        <BSButton Size="Size.Small"
                                                  Color="Color.Secondary"
                                                  IsDisabled="true"
                                                  ButtonType="ButtonType.Button">
                                            Select
                                        </BSButton>
                                    </BSTableCell>
                                </BSTableRow>
                            }
                            else
                            {
                                <BSTableRow>
                                    <BSTableCell>
                                        @dimensionStructure.Id
                                    </BSTableCell>
                                    <BSTableCell>
                                        @dimensionStructure.Name
                                    </BSTableCell>
                                    <BSTableCell>
                                        @dimensionStructure.Desc
                                    </BSTableCell>
                                    <BSTableCell>
                                    </BSTableCell>
                                    <BSTableCell>
                                        <BSButton Size="Size.Small"
                                                  Color="Color.Primary"
                                                  ButtonType="ButtonType.Button"
                                                  @onclick="@(async () => await SelectDimensionStructureForTree(dimensionStructure.Id).ConfigureAwait(false))">
                                            Select
                                        </BSButton>
                                    </BSTableCell>
                                </BSTableRow>
                            }
                        }
                    }
                }
            </BSTableBody>
        </BSTable>
    </BSModalBody>
    <BSModalFooter>
        @{
            if (_amountOfDimensionStructures > _updateDimensionStructureModalListPageSize)
            {
                <div>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await ShowFirstPagePagerAction().ConfigureAwait(false))">
                        First
                    </BSButton>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await PageBackOnePagePagerAction().ConfigureAwait(false))">
                        &larr;
                    </BSButton>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await PageForwardOnePagePagerAction().ConfigureAwait(false))">
                        &rarr;
                    </BSButton>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await ShowLastPagePagerAction().ConfigureAwait(false))">
                        Last
                    </BSButton>
                </div>
            }
        }

    </BSModalFooter>
</BSModal>