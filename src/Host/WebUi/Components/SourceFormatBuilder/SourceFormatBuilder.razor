@using DigitalLibrary.MasterData.DomainModel
<div>
    <BSBasicInput InputType="BlazorStrap.InputType.Select"
                  IsDisabled="@SourceFormatBuilderService.IsSourceFormatDropDownlistDisabled"
                  @bind-Value="@SourceFormatBuilderService.LoadedSourceFormatId">
        @{
            foreach (SourceFormat sourceFormat in _sourceFormats)
            {
                <option value="@sourceFormat.Id">
                    @sourceFormat.Name
                </option>
            }
        }
    </BSBasicInput>
    <BSButton ButtonType="ButtonType.Button"
              Color="Color.Primary"
              IsDisabled="@SourceFormatBuilderService.IsLoadSourceFormatsButtonDisabled"
              @onclick="@(async () => await NotifyDocumentDisplay().ConfigureAwait(false))">
        Load SourceFormat
    </BSButton>


    <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H3">Source Format</BSCard>
    @{
        <BSCard CardType="CardType.Body">
            <BSCard CardType="CardType.Title">
                Details
            </BSCard>
            <BSCard CardType="CardType.Text">
                <BSBasicForm>
                    <BSFormGroup>
                        <BSLabel>Name</BSLabel>
                        <BSBasicInput InputType="BlazorStrap.InputType.Text"
                                      @bind-Value="SourceFormatBuilderService.SourceFormat.Name">
                            @SourceFormatBuilderService.SourceFormat.Name
                        </BSBasicInput>
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSLabel>Description</BSLabel>
                        <BSBasicInput InputType="BlazorStrap.InputType.Text"
                                      @bind-Value="SourceFormatBuilderService.SourceFormat.Desc">
                            @SourceFormatBuilderService.SourceFormat.Desc
                        </BSBasicInput>
                    </BSFormGroup>
                </BSBasicForm>
            </BSCard>
        </BSCard>

        <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H4">Dimension structures</BSCard>
        <BSCard CardType="CardType.Body">
            @{
                if (SourceFormatBuilderService?.SourceFormat?.RootDimensionStructure != null)
                {
                    <BSCard CardType="CardType.Body">
                        @{
                            if (SourceFormatBuilderService.SourceFormat.RootDimensionStructure != null)
                            {
                                <DimensionStructureTree
                                    DimensionStructureParameter="@SourceFormatBuilderService.SourceFormat.RootDimensionStructure">
                                </DimensionStructureTree>
                            }
                            else
                            {
                                <BSCard CardType="CardType.Title">
                                    <div class="float-left">
                                        <strong>Root Dimension Structure: &nbsp;</strong>
                                        -- not selected yet --
                                    </div>
                                    <div class="float-right">
                                        <BSButton ButtonType="ButtonType.Button"
                                                  Color="Color.Primary"
                                                  @onclick="@(async () => await SelectRootDimensionStructure().ConfigureAwait(false))">
                                            Select
                                        </BSButton>
                                    </div>
                                </BSCard>
                            }
                        }
                    </BSCard>
                }
                else
                {
                    <BSCard CardType="CardType.Body">
                        <BSCard CardType="CardType.Title">Root Dimension Structure</BSCard>

                        @{
                            if (SourceFormatBuilderService.SourceFormat != null)
                            {
                                <BSButton Size="Size.Small"
                                          ButtonType="ButtonType.Button"
                                          Color="Color.Primary"
                                          @onclick="@(async () => await SelectRootDimensionStructure().ConfigureAwait(false))">
                                    Add Existing RootDimensionStructure
                                </BSButton>
                                <BSButton Size="Size.Small"
                                          ButtonType="ButtonType.Button"
                                          Color="Color.Primary"
                                          @onclick="@(async () => await AddNewRootDimensionStructureAsync().ConfigureAwait(false))">
                                    Add New RootDimensionStructure
                                </BSButton>
                            }
                        }

                    </BSCard>
                }
            }
        </BSCard>
    }
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Text">
            <BSButton Size="Size.Small"
                      ButtonType="ButtonType.Button"
                      Color="Color.Secondary"
                      IsDisabled="@SourceFormatBuilderService.IsSourceFormatCancelButtonDisabled"
                      @onclick="@(async () => await CancelSourceFormatOperation().ConfigureAwait(false))">
                Cancel
            </BSButton>
            <BSButton Size="Size.Small"
                      ButtonType="ButtonType.Button"
                      Color="Color.Primary"
                      IsDisabled="@SourceFormatBuilderService.IsSourceFormatSaveButtonDisabled"
                      @onclick="@(async () => await SaveSourceFormatOperation().ConfigureAwait(false))">
                Save
            </BSButton>
        </BSCard>
    </BSCard>

</div>

<BSModal @ref="_addNewRootDimensionStructureForm">
    <BSForm Model="@_newRootDimensionStructure"
            ValidateOnInit="true"
            OnValidSubmit="@(async () => await SaveNewRootDimensionStructureHandlerAsync().ConfigureAwait(false))">
        @* <DataAnnotationsValidator/> *@
        @* <ValidationSummary/> *@
        <BSModalHeader
            @onclick="@(async () => await CancelAddNewRootDimensionStructureAsync().ConfigureAwait(false))">
            Add new Root Dimension Structure
        </BSModalHeader>
        <BSModalBody>
            <BSFormGroup>
                <BSFormLabel>Id</BSFormLabel>
                <BSBasicInput InputType="BlazorStrap.InputType.Text"
                              IsDisabled="true"
                              @bind-Value="@_newRootDimensionStructure.Id">
                    @_newRootDimensionStructure.Id
                </BSBasicInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSFormLabel>Name</BSFormLabel>
                <BSInput InputType="BlazorStrap.InputType.Text"
                         @bind-Value="@_newRootDimensionStructure.Name">
                    @_newRootDimensionStructure.Name
                </BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSFormLabel>Description</BSFormLabel>
                <BSInput InputType="BlazorStrap.InputType.TextArea"
                         @bind-Value="@_newRootDimensionStructure.Desc">
                    @_newRootDimensionStructure.Desc
                </BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSFormLabel>Dimension</BSFormLabel>
                <BSInput InputType="BlazorStrap.InputType.Select"
                         @bind-Value="@_newRootDimensionStructure.DimensionId">
                    @{
                        foreach (Dimension dimension in _dimensions)
                        {
                            <option value="@dimension.Id">
                                @dimension.Name
                            </option>
                        }
                    }
                </BSInput>
            </BSFormGroup>
            <BSFormGroup>
                <BSFormLabel>Is Active?</BSFormLabel>
                <BSInput InputType="BlazorStrap.InputType.Range"
                         min="0"
                         max="1"
                         @bind-Value="@_newRootDimensionStructure.IsActive">
                    @_newRootDimensionStructure.IsActive
                </BSInput>
            </BSFormGroup>
        </BSModalBody>
        <BSModalFooter>
            <BSButton ButtonType="BlazorStrap.ButtonType.Button"
                      @onclick="@(async () => await CancelAddNewRootDimensionStructureAsync().ConfigureAwait(false))"
                      Color="Color.Secondary">
                Cancel
            </BSButton>
            <BSButton ButtonType="BlazorStrap.ButtonType.Submit"
                      Color="Color.Primary">
                Save
            </BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

<BSModal @ref="_rootDimensionStructureListModal" IsCentered="true" Size="Size.Large">
    <BSModalHeader OnClick="@(async () => await CancelRootDimensionStructureSelectAsync().ConfigureAwait(false))">
        Selet a root Dimension Structure for the SourceFormat.
    </BSModalHeader>
    <BSModalBody>
        <BSTable>
            <BSTableHead>
                <BSTableHeadCell>Id</BSTableHeadCell>
                <BSTableHeadCell>Name</BSTableHeadCell>
                <BSTableHeadCell>Desc</BSTableHeadCell>
                <BSTableHeadCell></BSTableHeadCell>
            </BSTableHead>
            <BSTableBody>
                @{
                    if (_rootDimensionStructureList != null)
                    {
                        foreach (DimensionStructure dimensionStructure in _rootDimensionStructureList)
                        {
                            <BSTableRow>
                                <BSTableCell>
                                    @dimensionStructure.Id
                                </BSTableCell>
                                <BSTableCell>
                                    @dimensionStructure.Name
                                </BSTableCell>
                                <BSTableCell>
                                    @dimensionStructure.Desc
                                </BSTableCell>
                                <BSTableCell>
                                    <BSButton ButtonType="ButtonType.Button"
                                              Color="Color.Primary"
                                              @onclick="@(async () => await SelectRootDimensionStructureHandler(dimensionStructure.Id).ConfigureAwait(false))">
                                        Select
                                    </BSButton>
                                </BSTableCell>
                            </BSTableRow>
                        }
                    }
                }
            </BSTableBody>
        </BSTable>
    </BSModalBody>
    <BSModalFooter>
        @{
            if (_rootDimensionStructureListRaw.Count > pageSize)
            {
                <div>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await ShowFirstPagePagerAction().ConfigureAwait(false))">
                        First
                    </BSButton>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await PageBackOnePagePagerAction().ConfigureAwait(false))">
                        &larr;
                    </BSButton>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await PageForwardOnePagePagerAction().ConfigureAwait(false))">
                        &rarr;
                    </BSButton>
                    <BSButton ButtonType="ButtonType.Button"
                              Color="Color.Primary"
                              Size="Size.Small"
                              @onclick="@(async () => await ShowLastPagePagerAction().ConfigureAwait(false))">
                        Last
                    </BSButton>
                </div>
            }
        }
    </BSModalFooter>
</BSModal>