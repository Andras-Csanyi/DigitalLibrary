# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
    exclude:
      - doc/*
  paths:
    exclude:
      - src/README.md
      - src/doc/*

schedules:
  - cron: "0 */12 * * *"
    displayName: Daily build
    branches:
      include:
        - master
    always: true

pr:
  - master

pool: 'contabo'

steps:
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'sonarcloud'
      organization: 'andras-csanyi'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'DigitalLibrary'
      cliProjectName: 'DigitalLibrary'
      cliSources: '.'
      extraProperties: |
        sonar.coverage.exclusions=**/obj/**/*, **/*.dll, src/MasterData/MasterData.BusinessLogic.Features.Tests/**/*, src/MasterData/MasterData.BusinessLogic.ViewModels.Unit.Tests/**/*, src/MasterData/MasterData.BusinessLogic.Tests.Integration/**/*, src/MasterData/MasterData.Controllers.Integration.Tests/**/*, src/MasterData/MasterData.Controllers.Unit.Tests/**/*, src/MasterData/MasterData.Validators.Test/**/*, src/MasterData/MasterData.DomainModel.Unit.Tests/**/*, src/MasterData/MasterData.StepDefinitions/**/*, src/MasterData/MasterData.Web.Api.Features.Tests/**/*, src/Utils/Guard.Tests/**/*, src/ControlPanel/ControlPanel.BusinessLogic.Implementations.Unit.Tests/**/*, src/ControlPanel/ControlPanel.WebApi.Client.Unit.Tests/**/*, src/Utils/ControlPanel.DataSample/**/*, src/Utils/TestHelper.Unit.Test/**/*, src/Utils/Guard.Tests/**/*, src/IntegrationTestFactories/**/*, src/MasterDataTestHelper/**/*
        sonar.cs.xunit.reportsPaths=$(Agent.TempDirectory)/**.*trx
        sonar.cs.dotcover.reportsPaths=$(Agent.TempDirectory)/dotcover/*.dotcover.html
        
  - task: DotNetCoreCLI@2
    displayName: 'Restoring...'
    inputs:
      command: 'restore'
      projects: 'src/DigitalLibrary.sln'
      feedsToUse: 'select'
      noCache: false

  - task: DotNetCoreCLI@2
    displayName: 'Building...'
    inputs:
      command: 'build'
      projects: 'src/DigitalLibrary.sln'
      arguments: '-c Debug'
      
  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/ControlPanel.BusinessLogic.Implementations.Unit.Tests.dotcover.html"
    workingDirectory: src/ControlPanel/ControlPanel.BusinessLogic.Implementations.Unit.Tests
    displayName: "Coverage for ControlPanel/ControlPanel.BusinessLogic.Implementations.Unit.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/ControlPanel.WebApi.Client.Unit.Tests.dotcover.html"
    workingDirectory: src/ControlPanel/ControlPanel.WebApi.Client.Unit.Tests
    displayName: "Coverage for ControlPanel/ControlPanel.WebApi.Client.Unit.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.BusinessLogic.Features.Tests.dotcover.html"
    workingDirectory: src/MasterData/MasterData.BusinessLogic.Features.Tests
    displayName: "Coverage MasterData/MasterData.BusinessLogic.Features.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.BusinessLogic.Tests.Integration.dotcover.html"
    workingDirectory: src/MasterData/MasterData.BusinessLogic.Tests.Integration
    displayName: "Coverage MasterData.BusinessLogic.Tests.Integration"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.BusinessLogic.ViewModels.Unit.Tests.dotcover.html"
    workingDirectory: src/MasterData/MasterData.BusinessLogic.ViewModels.Unit.Tests
    displayName: "Coverage MasterData/MasterData.BusinessLogic.ViewModels.Unit.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.Controllers.Integration.Tests.dotcover.html"
    workingDirectory: src/MasterData/MasterData.Controllers.Integration.Tests
    displayName: "Coverage MasterData/MasterData.Controllers.Integration.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.Controllers.Unit.Tests.dotcover.html"
    workingDirectory: src/MasterData/MasterData.Controllers.Unit.Tests
    displayName: "Coverage MasterData/MasterData.Controllers.Unit.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.DomainModel.Unit.Tests.dotcover.html"
    workingDirectory: src/MasterData/MasterData.DomainModel.Unit.Tests
    displayName: "Coverage MasterData/MasterData.DomainModel.Unit.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.Validators.Test.dotcover.html"
    workingDirectory: src/MasterData/MasterData.Validators.Test
    displayName: "Coverage MasterData/MasterData.Validators.Test"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/MasterData.Web.Api.Features.Tests.dotcover.html"
    workingDirectory: src/MasterData/MasterData.Web.Api.Features.Tests
    displayName: "Coverage MasterData/MasterData.Web.Api.Features.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/DiLib.FAST.Widgets.Tests.dotcover.html"
    workingDirectory: src/Host/DiLib.FAST.Widgets.Tests
    displayName: "Coverage Host/DiLib.FAST.Widgets.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/FAST.Components.Tests.dotcover.html"
    workingDirectory: src/Host/FAST.Components.Tests
    displayName: "Coverage Host/FAST.Components.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/WebUI.Test.dotcover.html"
    workingDirectory: src/Host/WebUI.Test
    displayName: "Coverage Host/Ui.WebUI.Test"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/Utils.Guard.Tests.dotcover.html"
    workingDirectory: src/Utils/Guard.Tests
    displayName: "Coverage Utils/Guard.Tests"

  - script: |
      dotnet dotcover test \
      --no-build \
      --dotCoverTempDir=$(Agent.TempDirectory) \
      --dotCoverReportType=html \
      --dotCoverOutput=$(Agent.TempDirectory)"/dotcover/TestHelper.Unit.Test.dotcover.html"
    workingDirectory: src/Utils/TestHelper.Unit.Test
    displayName: "Coverage Utils/TestHelper.Unit.Test"

  - task: SonarCloudAnalyze@1

  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'
      
  - task: DotNetCoreCLI@2
    displayName: 'Testing and publish result...'
    inputs:
      command: 'test'
      projects: 'src/DigitalLibrary.sln'
      arguments: '--no-build'