# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
    exclude:
      - doc/*
  paths:
    exclude:
      - src/README.md
      - src/doc/*

variables:
  SONAR_PROJECT_KEY: $(sonar.project.key)
  SONAR_LOGIN_KEY: $(sonar.login.key)
  SONAR_HOST_URL: $(sonar.host.url)

pr:
  - master

pool: 'contabo'

steps:
  - task: DotNetCoreCLI@2
    displayName: 'Restoring...'
    inputs:
      command: 'restore'
      projects: 'src/DigitalLibrary.sln'
      feedsToUse: 'select'
      verbosityRestore: 'Normal'

  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'sonarcloud'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'Andras-Csanyi_DigitalLibrary'
      cliProjectName: 'Andras-Csanyi_DigitalLibrary'
      cliSources: '.'

  - task: DotNetCoreCLI@2
    displayName: 'Building...'
    inputs:
      command: 'build'
      projects: 'src/DigitalLibrary.sln'
      arguments: '-c Debug'

  - task: DotNetCoreCLI@2
    displayName: 'Testing...'
    inputs:
      command: 'test'
      projects: 'src/DigitalLibrary.sln'
      arguments: "--no-build \
        /p:CollectCoverage=true \
        /p:ExcludeByAttribute='Obsolete*%2cGeneratedCodeAttribute*%2cCompilerGeneratedAttribute' \
        /p:CoverletOutputFormat=cobertura"
      publishTestResults: true

  - task: SonarQubeAnalyze@4

  - task: SonarQubePublish@4
    inputs:
      pollingTimeoutSec: '300'

  - task: PublishCodeCoverageResults@1
    displayName: 'Coverage...'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/src/**/coverage.cobertura.xml'
      pathToSources: '$(System.DefaultWorkingDirectory)/src'

  - script: |
      bash <(curl -s https://codecov.io/bash) -v
    displayName: 'Uploading to Codecov.io'

  # - script: |
  #     dotnet tool uninstall --global dotnet-sonarscanner
  #     dotnet tool install --global dotnet-sonarscanner
  #   displayName: 'Install sonar'

  # - script: |
  #     dotnet sonarscanner begin /o:andras-csanyi /k:Andras-Csanyi_DigitalLibrary /d:sonar.host.url=https://sonarcloud.io
  #   displayName: 'Sonar begin phase'

  # - script: |
  #     dotnet build 'src/DigitalLibrary.sln'
  #   displayName: 'Sonar build phase'

  # - script: |
  #     dotnet sonarscanner end
  #   displayName: 'Sonar end phase'